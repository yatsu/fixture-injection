import process from 'process'
import runJest from './runJest'

describe('Logging', () => {
  test('works', () => {
    process.env.FIXTURE_INJECTION_CONFIG = 'fixture-injection.config.js'
    process.env.FI_LOGGING = '1'
    const result = runJest('logging', [])
    const lines = result.stdout.split('\n')
    expect(lines[0]).toEqual('--- Fixture Log ---')
    expect(lines[1]).toMatch(/ \[ T \] suite 1 -> test 1 <> \| START$/)
    expect(lines[2]).toMatch(/ \[ T \] suite 1 -> test 1 <> \| END {2}\([\d\.]+ms\)$/)
    expect(lines[3]).toMatch(/ \[F\|G\] SETUP c \| START$/)
    expect(lines[4]).toMatch(/ \[F\|G\] SETUP a \| START$/)
    expect(lines[5]).toMatch(/ \[F\|G\] SETUP a \| END {2}\([\d\.]+ms\)$/)
    expect(lines[6]).toMatch(/ \[F\|G\] SETUP c \| END {2}\(1[\d\.]+ms\)$/)
    expect(lines[7]).toMatch(/ \[ B \] suite 2 -> beforeAll <a, c> \| START$/)
    expect(lines[8]).toMatch(/ \[ B \] suite 2 -> beforeAll <a, c> \| END {2}\([\d\.]+ms\)$/)
    expect(lines[9]).toMatch(/ \[F\|L\] SETUP f \| START$/)
    expect(lines[10]).toMatch(/ \[F\|L\] SETUP f \| END {2}\([\d\.]+ms\)$/)
    expect(lines[11]).toMatch(/ \[ T \] suite 2 -> test 1 <f> \| START$/)
    expect(lines[12]).toMatch(/ \[ T \] suite 2 -> test 1 <f> \| END {2}\([\d\.]+ms\)$/)
    expect(lines[13]).toMatch(/ \[F\|L\] TEARDOWN f \| START$/)
    expect(lines[14]).toMatch(/ \[F\|L\] TEARDOWN f \| END {2}\([\d\.]+ms\)$/)
    expect(lines[15]).toMatch(/ \[ A \] suite 2 -> afterAll <a, c> \| START$/)
    expect(lines[16]).toMatch(/ \[ A \] suite 2 -> afterAll <a, c> \| END {2}\([\d\.]+ms\)$/)
    expect(lines[17]).toMatch(/ \[F\|L\] SETUP h \| START$/)
    expect(lines[18]).toMatch(/ \[F\|L\] SETUP h \| END {2}\([\d\.]+ms\)$/)
    expect(lines[19]).toMatch(/ \[F\|G\] SETUP e \| START$/)
    expect(lines[20]).toMatch(/ \[F\|G\] SETUP e \| END {2}\([\d\.]+ms\)$/)
    expect(lines[21]).toMatch(/ \[F\|L\] SETUP j \| START$/)
    expect(lines[22]).toMatch(/ \[F\|L\] SETUP j \| END {2}\([\d\.]+ms\)$/)
    expect(lines[23]).toMatch(/ \[F\|L\] SETUP l \| START$/)
    expect(lines[24]).toMatch(/ \[F\|L\] SETUP l \| END {2}\(1[\d\.]+ms\)$/)
    expect(lines[25]).toMatch(/ \[ T \] suite 3 -> test 1 <c, l> \| START$/)
    expect(lines[26]).toMatch(/ \[ T \] suite 3 -> test 1 <c, l> \| END {2}\([\d\.]+ms\)$/)
    expect(lines[27]).toMatch(/ \[F\|L\] TEARDOWN h \| START$/)
    expect(lines[28]).toMatch(/ \[F\|L\] TEARDOWN h \| END {2}\([\d\.]+ms\)$/)
    expect(lines[29]).toMatch(/ \[F\|L\] TEARDOWN j \| START$/)
    expect(lines[30]).toMatch(/ \[F\|L\] TEARDOWN l \| START$/)
    expect(lines[31]).toMatch(/ \[F\|L\] TEARDOWN j \| END {2}\([\d\.]+ms\)$/)
    expect(lines[32]).toMatch(/ \[F\|L\] TEARDOWN l \| END {2}\(1[\d\.]+ms\)$/)
    expect(lines[33]).toMatch(/ \[F\|G\] TEARDOWN a \| START$/)
    expect(lines[34]).toMatch(/ \[F\|G\] TEARDOWN a \| END {2}\([\d\.]+ms\)$/)
    expect(lines[35]).toMatch(/ \[F\|G\] TEARDOWN c \| START$/)
    expect(lines[36]).toMatch(/ \[F\|G\] TEARDOWN e \| START$/)
    expect(lines[37]).toMatch(/ \[F\|G\] TEARDOWN e \| END {2}\([\d\.]+ms\)$/)
    expect(lines[38]).toMatch(/ \[F\|G\] TEARDOWN c \| END {2}\(1[\d\.]+ms\)$/)
    expect(lines[39]).toEqual('-------------------')
  })
})
